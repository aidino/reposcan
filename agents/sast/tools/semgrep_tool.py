# file: sast_tool_wrapper.py

import subprocess
import json
from typing import List, Dict, Any
from pathlib import Path

def semgrep_scan_project(source_path: str) -> Dict[str, Any]:
    """
    Th·ª±c thi Semgrep tr√™n m·ªôt th∆∞ m·ª•c m√£ ngu·ªìn v√† tr·∫£ v·ªÅ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng dictionary.

    Args:
        source_path (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c ho·∫∑c t·ªáp m√£ ngu·ªìn c·∫ßn qu√©t.
        
    Returns:
        Dict[str, Any]: M·ªôt dictionary ch·ª©a k·∫øt qu·∫£ ph√¢n t√≠ch t·ª´ Semgrep.
    """
    # X√¢y d·ª±ng c√¢u l·ªánh c∆° b·∫£n v·ªõi c√°c t·ªëi ∆∞u h√≥a
    command: List[str] = [
        "semgrep", "scan", 
        "--verbose", 
        "--json",
        "--timeout", "30",  # Gi·∫£m timeout xu·ªëng 30 gi√¢y
        "--max-target-bytes", "1000000",  # Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc file (1MB)
        "--jobs", "2",  # S·ª≠ d·ª•ng 2 jobs song song
        "--no-git-ignore",  # Kh√¥ng skip files trong .gitignore ƒë·ªÉ scan nhanh h∆°n
        "--optimizations", "all"  # B·∫≠t t·∫•t c·∫£ optimizations
    ]
    
    HERE = str((Path(__file__).parent).resolve())
    
    # Ch·ªâ s·ª≠ d·ª•ng m·ªôt subset rules quan tr·ªçng ƒë·ªÉ tƒÉng t·ªëc
    rule_paths: List[str] = [
        f"{HERE}/semgrep-rules/python/requests/security",  # Ch·ªâ security rules quan tr·ªçng
        f"{HERE}/semgrep-rules/generic/secrets",  # Secrets detection
    ]

    # Th√™m t·ª´ng ƒë∆∞·ªùng d·∫´n quy t·∫Øc v√†o c√¢u l·ªánh v·ªõi c·ªù --config
    for path in rule_paths:
        if Path(path).exists():  # Ki·ªÉm tra path t·ªìn t·∫°i
            command.extend(["--config", path])

    # Th√™m ƒë∆∞·ªùng d·∫´n m√£ ngu·ªìn c·∫ßn qu√©t v√†o cu·ªëi
    command.append(source_path)

    print(f"üîπ ƒêang th·ª±c thi l·ªánh (optimized): {' '.join(command)}")

    try:
        process = subprocess.run(
            command,
            capture_output=True,
            text=True,
            check=True,
            timeout=45  # Gi·∫£m timeout subprocess xu·ªëng 45 gi√¢y
        )
        results: Dict[str, Any] = json.loads(process.stdout)
        
        # Th√™m th√¥ng tin t·ªëi ∆∞u h√≥a
        results["scan_info"] = {
            "optimization": "enabled",
            "rules_used": rule_paths,
            "timeout_seconds": 45
        }
        
        print("‚úÖ Qu√©t th√†nh c√¥ng (optimized)!")
        return results

    except subprocess.TimeoutExpired:
        print("‚ùå L·ªñI: Semgrep scan timed out.")
        return {
            "error": "Semgrep scan timeout", 
            "details": "Qu√° tr√¨nh scan v∆∞·ª£t qu√° th·ªùi gian cho ph√©p (45 gi√¢y). ƒê√£ t·ªëi ∆∞u h√≥a nh∆∞ng d·ª± √°n v·∫´n qu√° l·ªõn.",
            "suggestion": "Th·ª≠ qu√©t th∆∞ m·ª•c con ho·∫∑c file c·ª• th·ªÉ thay v√¨ to√†n b·ªô d·ª± √°n."
        }
    except FileNotFoundError:
        print("‚ùå L·ªñI: L·ªánh 'semgrep' kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y.")
        return {
            "error": "Command not found: semgrep",
            "details": "H√£y ƒë·∫£m b·∫£o Semgrep ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t v√† c√≥ trong bi·∫øn m√¥i tr∆∞·ªùng PATH."
        }
    except subprocess.CalledProcessError as e:
        print(f"‚ùå L·ªñI: Semgrep th·ª±c thi th·∫•t b·∫°i v·ªõi exit code {e.returncode}.")
        # C·ªë g·∫Øng parse JSON t·ª´ stdout ngay c·∫£ khi c√≥ l·ªói, v√¨ Semgrep th∆∞·ªùng tr·∫£ v·ªÅ l·ªói trong JSON
        try:
            error_json = json.loads(e.stdout)
        except json.JSONDecodeError:
            error_json = {}
            
        return {
            "error": "Semgrep execution failed",
            "exit_code": e.returncode,
            "stdout": e.stdout, # Gi·ªØ l·∫°i stdout ƒë·ªÉ xem chi ti·∫øt l·ªói JSON
            "stderr": e.stderr,
            "parsed_error": error_json 
        }
    except json.JSONDecodeError:
        print("‚ùå L·ªñI: Kh√¥ng th·ªÉ ph√¢n gi·∫£i output JSON t·ª´ Semgrep.")
        return {
            "error": "JSON decoding failed",
            "raw_output": process.stdout if 'process' in locals() else "N/A"
        }

